<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<!-- This is the Solr schema file. This file should be named "schema.xml" 
	and should be in the conf directory under the solr home (i.e. ./solr/conf/schema.xml 
	by default) or located where the classloader for the Solr webapp can find 
	it. This example schema is the recommended starting point for users. It should 
	be kept correct and concise, usable out-of-the-box. For more information, 
	on how to customize this file, please see http://wiki.apache.org/solr/SchemaXml 
	PERFORMANCE NOTE: this schema includes many optional features and should 
	not be used for benchmarking. To improve performance one could - set stored="false" 
	for all fields possible (esp large fields) when you only need to search on 
	the field but don't need to return the original value. - set indexed="false" 
	if you don't need to search on the field, but only return the field as a 
	result of searching on other indexed fields. - remove all unneeded copyField 
	statements - for best index size and searching performance, set "index" to 
	false for all general text fields, use copyField to copy them to the catchall 
	"text" field, and use that for searching. - For maximum indexing performance, 
	use the StreamingUpdateSolrServer java client. - Remember to run the JVM 
	in server mode, and use a higher logging level that avoids logging every 
	request -->

<schema name="example4" version="1.5">
	<fields>

		<field name="id" type="string" indexed="true" stored="true"
			required="true" multiValued="false" />
		<!--登记机关的上级登记机关id或管辖单位的上级管辖单位id -->
		<field name="rootid" type="string" indexed="true" stored="true"
			multiValued="true" />
		<!-- 若rootid为 登记机关的上级登记机关id时，marpripinfo_zid对应于reg_marpripinfo的orgid 若rootid为管辖单位的上级管辖单位id是，marpripinfo_zid对应于reg_marpripinfo的superorgid -->
		<field name="marpripinfo_zid" type="string" indexed="true"
			stored="true" required="true" />

		<!-- Common metadata fields, named specifically to match up with SolrCell 
			metadata when parsing rich documents such as Word, PDF. Some fields are multiValued 
			only because Tika currently may return multiple values for them. Some metadata 
			is parsed from the documents, but there are some which come from the client 
			context: "content_type": From the HTTP headers of incoming stream "resourcename": 
			From SolrCell request param resource.name -->

		<field name="last_modified" type="date" indexed="true" stored="true" />
		<field name="_version_" type="long" indexed="true" stored="true" />
		<!-- catchall field, containing all other searchable text fields (implemented 
			via copyField further on in this schema -->
		<field name="text" type="text_general" indexed="true" stored="false"
			multiValued="true" />
	</fields>


	<!-- Field to use to determine and enforce document uniqueness. Unless this 
		field is marked with required="false", it will be a required field -->
	<uniqueKey>id</uniqueKey>
	<types>
		<!-- field type definitions. The "name" attribute is just a label to be 
			used by field definitions. The "class" attribute and any other attributes 
			determine the real behavior of the fieldType. Class names starting with "solr" 
			refer to java classes in a standard package such as org.apache.solr.analysis -->

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. It 
			supports doc values but in that case the field needs to be single-valued 
			and either required or have a default value. -->
		<fieldType name="string" class="solr.StrField"
			sortMissingLast="true" />

		<!-- Default numeric field types. For faster range queries, consider the 
			tint/tfloat/tlong/tdouble types. These fields support doc values, but they 
			require the field to be single-valued and either be required or have a default 
			value. -->
		<fieldType name="long" class="solr.TrieLongField"
			precisionStep="0" positionIncrementGap="0" />


		<fieldType name="date" class="solr.TrieDateField"
			precisionStep="0" positionIncrementGap="0" />
		<fieldType name="text_general" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

	</types>
</schema>
